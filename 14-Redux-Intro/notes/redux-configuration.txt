----------------------------------------------------------
Redux Toolkit Configuration
----------------------------------------------------------
store.js
---------
import {configureStore, Store} from "@reduxjs/toolkit";
import rootReducer from "./rootReducer";
import {useDispatch} from "react-redux";
import logger from "redux-logger";
import thunk from 'redux-thunk';

const store: Store = configureStore({
    reducer: rootReducer,
    middleware: [logger, thunk]
})
export default store;
export type RootState = ReturnType<typeof store.getState>
export type AppDispatch = typeof store.dispatch;
export const useAppDispatch = () => useDispatch<AppDispatch>()

Root Reducer 
------------
import {combineReducers} from "@reduxjs/toolkit";
import * as counterReducer from "./counter/counterSlice";
import * as employeeReducer from './employees/employeeSlice';
import * as userReducer from './user-list/userSlice';

const rootReducer: any = combineReducers({
    [counterReducer.counterFeatureKey]: counterReducer.counterSlice.reducer,
    [employeeReducer.employeeFeatureKey]: employeeReducer.employeeSlice.reducer,
    [userReducer.usersFeatureKey]: userReducer.userSlice.reducer
});
export default rootReducer;

index.tsx
----------
import {Provider} from "react-redux";
import store from "./redux/store";

root.render(
    <React.StrictMode>
        <Provider store={store}>
            <App/>
        </Provider>
    </React.StrictMode>
);

Counter Slice 
---------------
import {createSlice} from "@reduxjs/toolkit";

export const counterFeatureKey = "counterFeature";

export interface InitialState {
    count: number;
}

const initialState: InitialState = {
    count: 0
}

export const counterSlice = createSlice({
    name: "counter",
    initialState: initialState,
    reducers: {
        incrementCounter: (state, action) => {
            state.count = state.count + 1;
        },
        decrementCounter: (state, action) => {
            state.count = state.count - 1;
        },
        incrementCounterBy: (state, action) => {
            let {value} = action.payload;
            state.count = state.count + value;
        }
    }
});
export const {incrementCounter, decrementCounter, incrementCounterBy} = counterSlice.actions;

Counter Component 
------------------
const dispatch: AppDispatch = useDispatch();

// get data from the redux store
const counterState: counterReducer.InitialState = useSelector((store: RootState) => {
    return store[counterFeatureKey];
})
let clickIncr = (): void => {
    dispatch({
        type: `${counterReducer.incrementCounter}`
    })
};
let clickIncrBy = (value: number): void => {
    dispatch({
        type: `${counterReducer.incrementCounterBy}`,
        payload: {value: value}
    })
};

User Actions 
------------
import {createAsyncThunk} from "@reduxjs/toolkit";
import {ProductRequestView} from "../../modules/products/models/ProductRequestView";
import {ProductResponseView} from "../../modules/products/models/ProductResponseView";
import {ProductService} from "../../modules/products/services/ProductService";
import {AuthUtil} from "../../util/AuthUtil";

export const createProductAction: any = createAsyncThunk('products/createProductAction',
    async (product: ProductRequestView, {rejectWithValue}): Promise<{ msg: string; product: ProductResponseView } | any> => {
        try {
            if (AuthUtil.setTokenToRequestHeader()) { // always set this for private urls
                let response = await ProductService.createProduct(product);
                return response.data;
            }
        } catch (err: any) {
            if (!err.response) {
                throw err
            }
            return rejectWithValue(err.response.data)
        }
    })


User Slice 
-----------
import {createSlice, isRejectedWithValue, SerializedError} from "@reduxjs/toolkit";
import {ProductResponseView} from "../../modules/products/models/ProductResponseView";
import * as productActions from "./product.actions";
import {ToastUtil} from "../../util/ToastUtil";

export const productFeatureKey = "productFeature";

export interface InitialState {
    loading: boolean;
    errorMessage: SerializedError;
    products: ProductResponseView[];
    product: ProductResponseView;
}

const initialState: InitialState = {
    loading: false,
    errorMessage: {} as SerializedError,
    products: [] as ProductResponseView[],
    product: {} as ProductResponseView
};

export const productSlice = createSlice({
    name: 'productSlice',
    initialState: initialState,
    reducers: {},
    extraReducers: (builder) => {
        // createProductAction
        builder.addCase(productActions.createProductAction.pending, (state) => {
            state.loading = true;
        }).addCase(productActions.createProductAction.fulfilled, (state, action) => {
            state.loading = false;
            ToastUtil.displaySuccessToast(action.payload.msg);
        }).addCase(productActions.createProductAction.rejected, (state, action) => {
            state.loading = false;
            if (isRejectedWithValue(action)) {
                ToastUtil.displayErrorToast(action.payload.msg);
            }
        })

User List Component 
--------------------
const dispatch: AppDispatch = useAppDispatch();

// get data from redux store
const userState: userReducer.InitialState = useSelector((store: RootState) => {
    return store[usersFeatureKey];
});
let {loading, users, errorMessage} = userState;

useEffect(() => {
    dispatch(userActions.getAllUsersFromServer())
}, []);















